{"ast":null,"code":"function drawingapp() {\n  const canvas = document.getElementById('canvas');\n  const ctx = canvas.getContext('2d');\n  ctx.fillStyle = 'white';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  const undoButton = document.getElementById('undo');\n  undoButton.addEventListener('click', undo);\n  const redoButton = document.getElementById('redo');\n  redoButton.addEventListener('click', redo);\n  let isDrawing = false;\n  let currentColor = 'black';\n  let currentSize = 10;\n  let currentTool = 'pen';\n  canvas.addEventListener('mousedown', startDrawing);\n  canvas.addEventListener('mousemove', draw);\n  canvas.addEventListener('mouseup', stopDrawing);\n  canvas.addEventListener('mouseout', stopDrawing);\n  const controls = document.getElementById('controls');\n  controls.addEventListener('click', setTool);\n  function startDrawing(event) {\n    isDrawing = true;\n    ctx.beginPath();\n    ctx.moveTo(event.offsetX, event.offsetY);\n  }\n  function draw(event) {\n    if (isDrawing) {\n      ctx.lineTo(event.offsetX, event.offsetY);\n      ctx.strokeStyle = currentColor;\n      ctx.lineWidth = currentSize;\n      ctx.stroke();\n      states.push({\n        image: canvas.toDataURL(),\n        stroke: {\n          color: currentColor,\n          width: currentSize,\n          x: event.offsetX,\n          y: event.offsetY\n        }\n      });\n      currentState++;\n    }\n  }\n  function stopDrawing() {\n    isDrawing = false;\n  }\n  function setTool(event) {\n    if (event.target.id === 'pen') {\n      currentTool = 'pen';\n      currentColor = 'black';\n    } else if (event.target.id === 'eraser') {\n      currentTool = 'eraser';\n      currentColor = 'white';\n    } else if (event.target.id === 'small') {\n      if (currentTool === 'pen') currentColor = 'black';\n      currentSize = 10;\n    } else if (event.target.id === 'medium') {\n      if (currentTool === 'pen') currentColor = 'black';\n      currentSize = 20;\n    } else if (event.target.id === 'large') {\n      if (currentTool === 'pen') currentColor = 'black';\n      currentSize = 30;\n    } else if (event.target.id === 'clear') {\n      ctx.fillStyle = 'white';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n    } else if (event.target.id === 'download') {\n      downloadCanvas();\n    }\n  }\n  function downloadCanvas() {\n    const link = document.createElement('a');\n    link.download = 'image.jpg';\n    link.href = canvas.toDataURL('image/jpeg');\n    link.click();\n  }\n\n  //=====================================================\n\n  let currentState = 0;\n  let states = [];\n\n  // Push the initial state of the canvas onto the states array\n  states.push(canvas.toDataURL());\n  function undo() {\n    if (currentState > 0) {\n      currentState--;\n      // Redraw the previous state of the canvas, but remove the last stroke\n      const image = new Image();\n      image.src = states[currentState].image;\n      image.onload = function () {\n        ctx.drawImage(image, 0, 0);\n      };\n    }\n  }\n  function redo() {\n    if (currentState < states.length - 1) {\n      currentState++;\n      const image = new Image();\n      image.src = states[currentState].image;\n      image.onload = function () {\n        ctx.drawImage(image, 0, 0);\n      };\n    }\n  }\n}","map":{"version":3,"names":["drawingapp","canvas","document","getElementById","ctx","getContext","fillStyle","fillRect","width","height","undoButton","addEventListener","undo","redoButton","redo","isDrawing","currentColor","currentSize","currentTool","startDrawing","draw","stopDrawing","controls","setTool","event","beginPath","moveTo","offsetX","offsetY","lineTo","strokeStyle","lineWidth","stroke","states","push","image","toDataURL","color","x","y","currentState","target","id","downloadCanvas","link","createElement","download","href","click","Image","src","onload","drawImage","length"],"sources":["C:/Users/ramda/Documents/Projects/rakugaki/rakugaki_app/src/Components/rakugakidraw.js"],"sourcesContent":["\r\n    function drawingapp(){\r\n        const canvas = document.getElementById('canvas');\r\n    const ctx = canvas.getContext('2d');\r\n    ctx.fillStyle = 'white';\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n    \r\n    const undoButton = document.getElementById('undo');\r\n    undoButton.addEventListener('click', undo);\r\n    const redoButton = document.getElementById('redo');\r\n    redoButton.addEventListener('click', redo);\r\n    \r\n    \r\n    let isDrawing = false;\r\n    let currentColor = 'black';\r\n    let currentSize = 10;\r\n    let currentTool = 'pen';\r\n    \r\n    canvas.addEventListener('mousedown', startDrawing);\r\n    canvas.addEventListener('mousemove', draw);\r\n    canvas.addEventListener('mouseup', stopDrawing);\r\n    canvas.addEventListener('mouseout', stopDrawing);\r\n    \r\n    const controls = document.getElementById('controls');\r\n    controls.addEventListener('click', setTool);\r\n    \r\n    function startDrawing(event) {\r\n      isDrawing = true;\r\n      ctx.beginPath();\r\n      ctx.moveTo(event.offsetX, event.offsetY);\r\n    }\r\n    \r\n    function draw(event) {\r\n      if (isDrawing) {\r\n        ctx.lineTo(event.offsetX, event.offsetY);\r\n        ctx.strokeStyle = currentColor;\r\n        ctx.lineWidth = currentSize;\r\n        ctx.stroke();\r\n        states.push({\r\n            image: canvas.toDataURL(),\r\n            stroke: {\r\n                color: currentColor,\r\n                width: currentSize,\r\n                x: event.offsetX,\r\n                y: event.offsetY\r\n            }\r\n        });\r\n        currentState++;\r\n      }\r\n    }\r\n    \r\n    function stopDrawing() {\r\n      isDrawing = false;\r\n    }\r\n    \r\n    function setTool(event) {\r\n      if (event.target.id === 'pen') {\r\n        currentTool = 'pen';\r\n        currentColor = 'black';\r\n      } else if (event.target.id === 'eraser') {\r\n        currentTool = 'eraser';\r\n        currentColor = 'white';\r\n      } else if (event.target.id === 'small') {\r\n        if(currentTool === 'pen') currentColor = 'black';\r\n        currentSize = 10;\r\n      } else if (event.target.id === 'medium') {\r\n        if(currentTool === 'pen') currentColor = 'black';\r\n        currentSize = 20;\r\n      } else if (event.target.id === 'large') {\r\n        if(currentTool === 'pen') currentColor = 'black';\r\n        currentSize = 30;\r\n      } else if (event.target.id === 'clear') {\r\n        ctx.fillStyle = 'white';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n      } else if (event.target.id === 'download') {\r\n        downloadCanvas();\r\n      }\r\n    }\r\n    \r\n    function downloadCanvas() {\r\n      const link = document.createElement('a');\r\n      link.download = 'image.jpg';\r\n      link.href = canvas.toDataURL('image/jpeg');\r\n      link.click();\r\n      }\r\n      \r\n      //=====================================================\r\n      \r\n      let currentState = 0;\r\n      let states = [];\r\n      \r\n      // Push the initial state of the canvas onto the states array\r\n      states.push(canvas.toDataURL());\r\n      \r\n      function undo() {\r\n      if (currentState > 0) {\r\n      currentState--;\r\n      // Redraw the previous state of the canvas, but remove the last stroke\r\n      const image = new Image();\r\n      image.src = states[currentState].image;\r\n      image.onload = function() {\r\n      ctx.drawImage(image, 0, 0);\r\n      };\r\n      }\r\n      }\r\n      \r\n      function redo() {\r\n      if (currentState < states.length - 1) {\r\n      currentState++;\r\n      const image = new Image();\r\n      image.src = states[currentState].image;\r\n      image.onload = function() {\r\n      ctx.drawImage(image, 0, 0);\r\n      };\r\n      }\r\n      }\r\n    }\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}