{"ast":null,"code":"// function drawingapp(){\n//     const canvas = document.getElementById('canvas');\n//     const ctx = canvas.getContext('2d');\n//     ctx.fillStyle = 'white';\n//     ctx.fillRect(0, 0, canvas.width, canvas.height);\n//     const undoButton = document.getElementById('undo');\n//     undoButton.addEventListener('click', undo);\n//     const redoButton = document.getElementById('redo');\n//     redoButton.addEventListener('click', redo); \n//     let isDrawing = false;\n//     let currentColor = 'black';\n//     let currentSize = 10;\n//     let currentTool = 'pen';\n//     canvas.addEventListener('mousedown', startDrawing);\n//     canvas.addEventListener('mousemove', draw);\n//     canvas.addEventListener('mouseup', stopDrawing);\n//     canvas.addEventListener('mouseout', stopDrawing);\n//     const controls = document.getElementById('controls');\n//     controls.addEventListener('click', setTool); \n//     function startDrawing(event) {\n//       isDrawing = true;\n//       ctx.beginPath();\n//       ctx.moveTo(event.offsetX, event.offsetY);\n//     }\n\n//   function draw(event) {\n//     if (isDrawing) {\n//       ctx.lineTo(event.offsetX, event.offsetY);\n//       ctx.strokeStyle = currentColor;\n//       ctx.lineWidth = currentSize;\n//       ctx.stroke();\n//       states.push({\n//         image: canvas.toDataURL(),\n//         stroke: {\n//           color: currentColor,\n//           width: currentSize,\n//           x: event.offsetX,\n//           y: event.offsetY\n//         }\n//       });\n//       currentState++;\n//     }\n//   }\n\n//   function stopDrawing() {\n//     isDrawing = false;\n//   }\n\n//   function setTool(event) {\n//     if (event.target.id === 'pen') {\n//       currentTool = 'pen';\n//       currentColor = 'black';\n//     } else if (event.target.id === 'eraser') {\n//       currentTool = 'eraser';\n//       currentColor = 'white';\n//     } else if (event.target.id === 'small') {\n//       if(currentTool === 'pen') currentColor = 'black';\n//       currentSize = 10;\n//     } else if (event.target.id === 'medium') {\n//       if(currentTool === 'pen') currentColor = 'black';\n//       currentSize = 20;\n//     } else if (event.target.id === 'large') {\n//       if(currentTool === 'pen') currentColor = 'black';\n//       currentSize = 30;\n//     } else if (event.target.id === 'clear') {\n//       ctx.fillStyle = 'white';\n//       ctx.fillRect(0, 0, canvas.width, canvas.height);\n//     } else if (event.target.id === 'download') {\n//       downloadCanvas();\n//     }\n//   }\n\n//   function downloadCanvas() {\n//     const link = document.createElement('a');\n//     link.download = 'image.jpg';\n//     link.href = canvas.toDataURL('image/jpeg');\n//     link.click();\n//   }\n\n//   let currentState = 0;\n//   let states = [];\n\n//   states.push(canvas.toDataURL());\n\n//   function undo() {\n//     if (currentState > 0) {\n//       currentState--;\n//       const image = new Image();\n//       image.src = states[currentState].image;\n//       image.onload = function() {\n//         ctx.drawImage(image, 0, 0);\n//       };\n//     }\n//   }\n\n//   function redo() {\n//     if (currentState < states.length - 1) {\n//       currentState++;\n//       const image = new Image();\n//       image.src = states[currentState].image;\n//       image.onload = function() {\n//         ctx.drawImage(image, 0, 0);\n//       };\n//     }\n//   }\n//   }","map":{"version":3,"names":[],"sources":["C:/Users/ramda/Documents/Projects/rakugaki/rakugaki_app/src/Components/rakugakidraw.js"],"sourcesContent":["  // function drawingapp(){\r\n  //     const canvas = document.getElementById('canvas');\r\n  //     const ctx = canvas.getContext('2d');\r\n  //     ctx.fillStyle = 'white';\r\n  //     ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n  //     const undoButton = document.getElementById('undo');\r\n  //     undoButton.addEventListener('click', undo);\r\n  //     const redoButton = document.getElementById('redo');\r\n  //     redoButton.addEventListener('click', redo); \r\n  //     let isDrawing = false;\r\n  //     let currentColor = 'black';\r\n  //     let currentSize = 10;\r\n  //     let currentTool = 'pen';\r\n  //     canvas.addEventListener('mousedown', startDrawing);\r\n  //     canvas.addEventListener('mousemove', draw);\r\n  //     canvas.addEventListener('mouseup', stopDrawing);\r\n  //     canvas.addEventListener('mouseout', stopDrawing);\r\n  //     const controls = document.getElementById('controls');\r\n  //     controls.addEventListener('click', setTool); \r\n  //     function startDrawing(event) {\r\n  //       isDrawing = true;\r\n  //       ctx.beginPath();\r\n  //       ctx.moveTo(event.offsetX, event.offsetY);\r\n  //     }\r\n    \r\n  //   function draw(event) {\r\n  //     if (isDrawing) {\r\n  //       ctx.lineTo(event.offsetX, event.offsetY);\r\n  //       ctx.strokeStyle = currentColor;\r\n  //       ctx.lineWidth = currentSize;\r\n  //       ctx.stroke();\r\n  //       states.push({\r\n  //         image: canvas.toDataURL(),\r\n  //         stroke: {\r\n  //           color: currentColor,\r\n  //           width: currentSize,\r\n  //           x: event.offsetX,\r\n  //           y: event.offsetY\r\n  //         }\r\n  //       });\r\n  //       currentState++;\r\n  //     }\r\n  //   }\r\n    \r\n  //   function stopDrawing() {\r\n  //     isDrawing = false;\r\n  //   }\r\n    \r\n  //   function setTool(event) {\r\n  //     if (event.target.id === 'pen') {\r\n  //       currentTool = 'pen';\r\n  //       currentColor = 'black';\r\n  //     } else if (event.target.id === 'eraser') {\r\n  //       currentTool = 'eraser';\r\n  //       currentColor = 'white';\r\n  //     } else if (event.target.id === 'small') {\r\n  //       if(currentTool === 'pen') currentColor = 'black';\r\n  //       currentSize = 10;\r\n  //     } else if (event.target.id === 'medium') {\r\n  //       if(currentTool === 'pen') currentColor = 'black';\r\n  //       currentSize = 20;\r\n  //     } else if (event.target.id === 'large') {\r\n  //       if(currentTool === 'pen') currentColor = 'black';\r\n  //       currentSize = 30;\r\n  //     } else if (event.target.id === 'clear') {\r\n  //       ctx.fillStyle = 'white';\r\n  //       ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n  //     } else if (event.target.id === 'download') {\r\n  //       downloadCanvas();\r\n  //     }\r\n  //   }\r\n    \r\n  //   function downloadCanvas() {\r\n  //     const link = document.createElement('a');\r\n  //     link.download = 'image.jpg';\r\n  //     link.href = canvas.toDataURL('image/jpeg');\r\n  //     link.click();\r\n  //   }\r\n      \r\n  //   let currentState = 0;\r\n  //   let states = [];\r\n      \r\n  //   states.push(canvas.toDataURL());\r\n      \r\n  //   function undo() {\r\n  //     if (currentState > 0) {\r\n  //       currentState--;\r\n  //       const image = new Image();\r\n  //       image.src = states[currentState].image;\r\n  //       image.onload = function() {\r\n  //         ctx.drawImage(image, 0, 0);\r\n  //       };\r\n  //     }\r\n  //   }\r\n      \r\n  //   function redo() {\r\n  //     if (currentState < states.length - 1) {\r\n  //       currentState++;\r\n  //       const image = new Image();\r\n  //       image.src = states[currentState].image;\r\n  //       image.onload = function() {\r\n  //         ctx.drawImage(image, 0, 0);\r\n  //       };\r\n  //     }\r\n  //   }\r\n  //   }\r\n\r\n"],"mappings":"AAAE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}